/**
 * Title: 二叉树(非线性结构)的构建及相关操作
 * Description:
 * 1,以广义表形式的字符串构建二叉树：'()'前表示根结点，括号中左右子树用逗号隔开，逗号不能省略
 * 2,二叉树的层次/广序遍历算法
 * 3,二叉树的前序、中序、后序遍历的递归和非递归算法(对每个节点而言，三种遍历方式都需要遍历该结点三次，三者唯一区别在于该结点的访问时机)
 * 4,根据二叉树的前序、中序或中序、后序遍历结果构建二叉树
 * 5,二叉树的高度
 * 6,二叉树的结点总数
 * 7,根据树的根结点复制一颗二叉树
 * 8,获取二叉树的根结点，孩子节点
 * 9,打印二叉树
 * 10,判断两颗二叉树是否相等
 */

 1，节点的度：节点拥有的子树数目称为节点的度
 2，树的深度：树中节点的最大层次数称为树的深度或高度
 3，二叉树：二叉树是n(n>=0)个节点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根节点和两棵互不相交的、
 分别称为根节点的左子树和右子树组成
    特点：
      （1）每个节点最多有两颗子树，所以二叉树中不存在度大于2的节点。
    （2）左子树和右子树是有顺序的，次序不能任意颠倒。
    （3）即使树中某节点只有一棵子树，也要区分它是左子树还是右子树。
    性质：
       （1）在二叉树的第i层上最多有2i-1 个节点 。（i>=1）
     （2）二叉树中如果深度为k,那么最多有2k-1个节点。(k>=1）
     （3）n0=n2+1 n0表示度数为0的节点数，n2表示度数为2的节点数。
     （4）在完全二叉树中，具有n个节点的完全二叉树的深度为[log2n]+1，其中[log2n]是向下取整。

 4，满二叉树：在一棵二叉树中。如果所有分支节点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。
    特点：
      （1）叶子只能出现在最下一层。出现在其它层就不可能达成平衡。
    （2）非叶子节点的度一定是2。
    （3）在同样深度的二叉树中，满二叉树的节点个数最多，叶子节点数最多。
 5，完全二叉树：
     对一颗具有n个节点的二叉树按层编号，如果编号为i(1<=i<=n)的节点与同样深度的满二叉树中编号为i的节点在二叉树中位置完全相同，
     则这棵二叉树称为完全二叉树。
    特点：
       （1）叶子节点只能出现在最下层和次下层。
     （2）最下层的叶子节点集中在树的左部。
     （3）倒数第二层若存在叶子节点，一定在右部连续位置。
     （4）如果节点度为1，则该节点只有左孩子，即没有右子树。
     （5）同样节点数目的二叉树，完全二叉树深度最小。
    注意：满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树
    优势：完全二叉树可以解决顺序存储空间浪费的问题。
 6，二叉搜索树：二叉搜索树又称二叉查找树，亦称为二叉排序树
     特点：
       （1）若左子树不空，则左子树上所有节点的值均小于它的根节点的值；
     （2）若右子树不空，则右子树上所有节点的值均大于它的根节点的值；
     （3）左、右子树也分别为二叉搜索树；

   注意：1，查找节点的时间取决于这个节点所在的层数，每一层最多有2n-1个节点，总共N层共有2n-1个节点，那么时间复杂度为O(logN),底数为2。
         2，O(logN)，N表示的是二叉树节点的总数，而不是层数。
